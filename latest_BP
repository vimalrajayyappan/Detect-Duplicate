{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "TensorFlow with GPU",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 2",
      "name": "python2"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vimalrajayyappan/Detect-Duplicate/blob/master/latest_BP\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "id": "oVgLRK5LqSCA",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from scipy.spatial import KDTree\n",
        "import math as MT\n",
        "\n",
        "\n",
        "class constants():\n",
        "  def __init__(self):\n",
        "    self.waypoint_list=[[[65,1,np.pi/2],[65,2,np.pi/2],[65,3,np.pi/2]],[[4,1,np.pi/2],[4,2,np.pi/2],[4,3,np.pi/2]]]  \n",
        "    self.vehicle_pt_obj_actual = vehicle_points( np.array([[0.5,0.5],[0.5,1.5],[0.5,2.5],[0.5,3.5],[1.5,0.5],[1.5,1.5],[1.5,2.5],[1.5,3.5]]),[0,2] )\n",
        "    self.waypoint_tree_list=get_way_point_tree_list(waypoint_list)\n",
        "    self.offset_value=10\n",
        "\n",
        "### LANE CLASS\n",
        "class vehicle_params():\n",
        "  def __init__(self,lane_number,goal_lane,state):\n",
        "    self.lane_number=lane_number\n",
        "    self.goal_lane=goal_lane\n",
        "    self.state=state\n",
        "    \n",
        "    \n",
        "    \n",
        "lane_direction = {\"PLCL\": -1, \"LCL\": -1, \"LCR\": 1, \"PLCR\": 1,\"KL\":0,\"STOP\":None}\n",
        "vehicle_state=vehicle_params(0,0,\"KL\")\n",
        "constant=constants()\n",
        "localization_value=[0,2.5]\n",
        "### GRID MAKING \n",
        "grid_x_m = 100\n",
        "grid_y_m = 100\n",
        "\n",
        "### FOR CELL DIVISION\n",
        "coll_cell_side = 1.0\n",
        "grid_on_x = np.int( np.ceil(grid_x_m/coll_cell_side) )\n",
        "grid_on_y = np.int( np.ceil(grid_y_m/coll_cell_side) )\n",
        "\n",
        "### FIT ZEROS\n",
        "grid = np.zeros((grid_on_x,grid_on_y),np.int)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "def get_way_point_tree_list(waypoint_list):\n",
        "  waypoint_tree_list=[]\n",
        "  for lane_waypoints in waypoint_list:\n",
        "    re_created_wp=[[w[0],w[1]] for w in lane_waypoints]\n",
        "    waypoints_tree=KDTree(re_created_wp)\n",
        "    waypoint_tree_list.append(waypoints_tree)\n",
        "  return waypoint_tree_list\n",
        "    \n",
        "    \n",
        "def closest_index(waypoints_tree,lane_waypoints,localized_point):\n",
        "  closest_idx=waypoints_tree.query(localized_point,1)[1]\n",
        "  closest_coord=lane_waypoints[closest_idx][:2]\n",
        "  prev_coord=lane_waypoints[closest_idx-1][:2]\n",
        "  cl_vect=np.array(closest_coord)\n",
        "  prev_vect=np.array(prev_coord)\n",
        "  pos_vect=np.array(localized_point)\n",
        "  val= np.dot(cl_vect-prev_vect,pos_vect-cl_vect)\n",
        "  if val>0:\n",
        "    temp=closest_idx\n",
        "    closest_idx=(closest_idx+1)%len(lane_waypoints)\n",
        "    if(closest_idx==0 and temp>0):\n",
        "      closest_idx=temp\n",
        "  return closest_idx\n",
        "\n",
        "\n",
        "### INPUT VEHICLE CO-ORDINATES\n",
        "class vehicle_points():\n",
        "  def __init__(self,input_co_ordinates,center):\n",
        "    self.input_co_ordinates=input_co_ordinates\n",
        "    self.center=center\n",
        "    \n",
        "\n",
        "\n",
        "\n",
        "### FLOOR VALUE\n",
        "def idx(value):\n",
        "  return int(MT.floor(value))\n",
        "\n",
        "\n",
        "### TRANSFORM VEHICLE CO-ORDINATES \n",
        "def transform_vehicle_co_ordinates(vehicle_point_object, next_state, angle_of_rotation):\n",
        "    displaced_matrix = np.array([next_state[0]-vehicle_point_object.center[0],next_state[1]-vehicle_point_object.center[1]])\n",
        "    transformed_matrix=np.add(vehicle_point_object.input_co_ordinates,displaced_matrix)\n",
        "    return vehicle_points(rotate_vehicle_co_ordinates(vehicle_points(transformed_matrix,next_state),angle_of_rotation),next_state)\n",
        "  \n",
        "  \n",
        "### ROTATE VEHICLE CO-ORDINATES     \n",
        "def rotate_vehicle_co_ordinates(vehicle_point_object,angle_of_rotation):\n",
        "    rotation_matrix = np.array([[np.cos(angle_of_rotation), np.sin(angle_of_rotation)], \n",
        "                                [-np.sin(angle_of_rotation), np.cos(angle_of_rotation)]])\n",
        "    return np.add(vehicle_point_object.center,np.matmul(np.subtract(vehicle_point_object.input_co_ordinates,vehicle_point_object.center), rotation_matrix))\n",
        "\n",
        "\n",
        "### CHECK VEHICLE IN SAFE POSITION  \n",
        "def is_vehicle_in_safe_position(vehicle_point_object,grid):\n",
        "  grid_on_x=len(grid[0])\n",
        "  grid_on_y=len(grid)\n",
        "  for point in vehicle_point_object.input_co_ordinates:\n",
        "    if(is_within_grid( idx(point[0]),idx(point[1]),grid_on_x,grid_on_y) and  \n",
        "       (grid[idx(point[0])][idx(point[1])]==0)):\n",
        "      continue\n",
        "    else:\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "### CHECK WITHIN GRID  \n",
        "def is_within_grid(x,y,grid_on_x,grid_on_y):\n",
        "  return (x>=0 and x<grid_on_x and y>=0 and y<grid_on_y)\n",
        "\n",
        "def validate_safe(waypoints,vehicle_pt_obj_actual,grid):\n",
        "  for wp in waypoints:\n",
        "    #print(wp)\n",
        "    transformed_coordinates=transform_vehicle_co_ordinates(vehicle_pt_obj_actual,[wp[0],wp[1]],wp[2])\n",
        "    #print(transformed_coordinates.input_co_ordinates)\n",
        "    if(not is_vehicle_in_safe_position(transformed_coordinates,grid)):\n",
        "      return False\n",
        "  return True\n",
        "\n",
        "\n",
        "\n",
        "def successor_states(lane,lanes_available,state):\n",
        "        \"\"\"\n",
        "        Provides the possible next states given the current state for the FSM discussed in the course,\n",
        "        with the exception that lane changes happen instantaneously, so LCL and LCR can only transition back to KL.\n",
        "        \"\"\"\n",
        "        if state in (\"KL\",\"STOP\"):\n",
        "            states = [\"KL\",\"STOP\"]\n",
        "            if lane != 0:\n",
        "                states.append(\"LCL\")\n",
        "            if lane != (lanes_available-1):\n",
        "                states.append(\"LCR\")\n",
        "        \n",
        "        elif state in (\"LCL\", \"LCR\"):\n",
        "            states = [\"KL\",\"STOP\"] \n",
        "            \n",
        "        elif state == \"PLCL\":\n",
        "            states = [\"KL\",\"STOP\"]\n",
        "            if lane != 0:\n",
        "                states.append(\"PLCL\")\n",
        "                states.append(\"LCL\")\n",
        "                \n",
        "        elif state == \"PLCR\":\n",
        "            states = [\"KL\",\"STOP\"]\n",
        "            if lane != (lanes_available-1):\n",
        "                states.append(\"PLCR\")\n",
        "                states.append(\"LCR\")\n",
        "                \n",
        "       \n",
        "        return states\n",
        "\n",
        "def calculate_cost(lane_num,goal_lane,localization,grid):\n",
        "    waypoints=constant.waypoint_list[lane_num]\n",
        "    near_index=closest_index(constant.waypoint_tree_list[lane_num],waypoints,localization)\n",
        "    waypoints=waypoints[near_index:near_index + constant.offset_value]\n",
        "    vehicle_pt_obj_actual = constant.vehicle_pt_obj_actual\n",
        "    if(validate_safe(waypoints,vehicle_pt_obj_actual,grid) and len(waypoints)>=1):\n",
        "      delta_d=float(abs(lane_num-goal_lane))\n",
        "      cost= 1 - MT.exp(-(abs(delta_d) / len(waypoints)))\n",
        "      return cost\n",
        "    else:\n",
        "      return float('inf')\n",
        "    \n",
        "    \n",
        "def choose_next_state(vehicle_state,lanes_available,localization,grid):\n",
        "        costs = []\n",
        "        states = successor_states(vehicle_state.lane_number,lanes_available,vehicle_state.state)\n",
        "        print(states)\n",
        "        for state in states:\n",
        "          value=lane_direction[state]\n",
        "          if value!=None:\n",
        "            lane_index=vehicle_state.lane_number + value\n",
        "            cost = calculate_cost(lane_index,vehicle_state.goal_lane,localization,grid)\n",
        "            costs.append({\"cost\" : cost, \"state\": state})\n",
        "          else:\n",
        "            costs.append({\"cost\" : 100, \"state\": state})\n",
        "        print(costs)   \n",
        "        best = min(costs, key=lambda s: s['cost'])\n",
        "        return best[\"state\"]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "qO-qaYaZqlaS",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "91a17969-acb4-4f0f-d976-561db787ba96"
      },
      "cell_type": "code",
      "source": [
        "choose_next_state(vehicle_state,2,localization_value,grid)"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['KL', 'STOP', 'LCR']\n",
            "[{'state': 'KL', 'cost': 0.0}, {'state': 'STOP', 'cost': 100}, {'state': 'LCR', 'cost': 0.6321205588285577}]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'KL'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "metadata": {
        "id": "FW1GPanMN_VI",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}